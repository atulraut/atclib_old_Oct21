---------------------------------------BitWise---------------------------------
Links :
https://web.stanford.edu/class/archive/cs/cs107/cs107.1194/lab1/practice.html
http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan
https://mdrach.github.io/cs107-apps/
https://web.stanford.edu/class/archive/cs/cs107/cs107.1186/lectures/02-bits.pdf
-------------------------------------------------------------------------------
  3 2 1 0 [Index]
  8 4 2 1 [Power]
  << ==   [Multiplication *]
  >> ==   [Divide  /]
-------------------------------------------------------------------------------
Practice ascii to hex. The values are char.
Ascii 	Hex
'I' 	0x49
'5' 	0x35
'd' 	0x64
'0'     0x0    48
Each lowercase letter is 32 + uppercase equivalent. This means simply flipping
the bit at position 5 (counting from least significant bit at position 0)
inverts the case of a letter.  A --> 65 | 65 + 32 = 97 <-- a
S C T
O A X
SOCATX - To Remember SOC @ X
--------------------------------------------------------------------------------
16384 8196  4096   2048  1024  512  256  128    64  32  16   8   4   2    1
14    13    12     11    10    9    8    7      6   5   4    3   2   1    0
-------------------------------------------------------------------------------------------------
2^8 = 256 | 4 2^7 = 128 | 2^6 = 64 | 2^5 = 32 | 2^4 = 16 | 2^3 = 8 | 2^2 = 4 | 2^1 = 2 | 2^0 = 1 |
-------------------------------------------------------------------------------------------------
Data Pack/UnPack Logic :
1. Pack - Multiple - << |
2. Unpack - Divide - >> {Extraction data from particular bits/bytes}
---------------------------------------------------------------------------------
 temp1 = c & 0x0F; /* 0x0F == 15 */
 temp1 = 100 & 15 = 0110 0100 = 100
	0000 1111 = 15
---------------------------------------------------------
			0000100 = 100 (&)
---------------------------------------------------------------------------------
Using 0xaa : As mask clears bits in position 0/2/4/6 etc.
0xAAAAAAAA - 1010 1010 1010 1010 1010 1010 1010 1010 - 0x10
Using 0x55 : As mask clears bits in position 1/3/5/ etc.
0x55555555 - 0101 0101 0101 0101 0101 0101 0101 0101 - 0x01
---------------------------------------------------------------------------------
7   6  5  4  3 2 1 0
--------------------------------------------------------------------------------
0   1  1  0  0 1 0 0 = 100    [c = 100]                 [A]
0   0  0  0  1 1 1 1 = 15     [0x0F == 15 ]
-------------------------------------------------
0   0  0  0  0 1 0 0 = 4  <-- Output [100 & 0x0F] : temp1 = c & 0x0F;
---------------------------------------------------------------------------------
0   1  1  0  0 1 0 0 = 100    [c = 100]
1   1  1  1  0 0 0 0 = 240    [0xF0 == 240 ]
---------------------------------------------------------------------------------
0   1  1  0  0 0 0 0 = 96 <-- Output [100 & 0xF0] : temp2 = c & 0xF0;
---------------------------------------------------------------------------------
temp1=temp1 << 4; = 4 << 4 = 4 * 2^4 (16) = 64
temp2=temp2 >> 4; = 96>> 4 = 96/ 2^4 (16) = 06

res = temp1| temp 2 = 64 | 6 =
0   1  0  0  0 0 0 0 = 64 = temp1
0   0  0  0  0 1 1 0 = 6  = tmep2
--------------------------------------------------------------------------------
0   1  0  0  0 1 1 0 = res = temp1 | temp2 = 70		[B] Nibbles Got Swap check with A

--------------------------------------------------------------------------------
Truth Table :
----------------------
 i/p  | OR | & | XOR |
----------------------
0 | 0 | 0  | 0 | 0   |
----------------------
0 | 1 | 1  | 0 | 1   |
----------------------
1 | 0 | 1  | 0 | 1   |
----------------------
1 | 1 | 1  | 1 | 0   |
----------------------
--------------------------------------------------------------------------------
Tips/Tricks :
To Pack Bits Used : "<<" | {2 Operator}
To Unpack Bits    : ">>"   {1 Operator}
--------------------------------------------------------------------------------
|Value		| Binary
--------------------------------------------------------------------------------
| -1		11111111 11111111 11111111 11111111
| INT_MAX 	01111111 11111111 11111111 11111111
| INT_MIN 	10000000 00000000 00000000 00000000
| UINT_MAX 	11111111 11111111 11111111 11111111
--------------------------------------------------------------------------------
What is difference between & and && operator :
--> Ref : http://www.geeksforgeeks.org/what-are-the-differences-between-bitwise-and-logical-and-operators-in-cc/
a) The logical and operator ‘&&’ expects its operands to be boolean expressions
(either 1 or 0) and returns a boolean value.
The bitwise and operator ‘&’ works on Integral (short, int, unsigned, char, bool,
unsigned char, long) values and return Integral value.

int main() {
    int x = 3;  //...0011
    int y = 7;  //...0111
    // A typical use of '&&'
    if (y > 1 && y > x)
      printf("y is greater than 1 AND y\n");
    // A typical use of '&'
    int z = x & y;   // 0011
    printf ("z = %d", z);

    return 0;
}
--------------------------------------------------------------------------------
Tool :
1. gdb - p 'I' or p/t 'I'
2. https://mdrach.github.io/cs107-apps/
--------------------------------------------------------------------------------
