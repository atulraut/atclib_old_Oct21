Array Tips :

Q] How to convert array to readable format.
==> if we have array of 2 rows & 3 columens --> arr[2][3]
Note - Scan factor very Important, here for Int its 4.
Step 1: 2 rows
-------------------
|	|	  |
|	|	  |
-------------------
x100   x112    x124

Step 2: 3 Columsn
-------------------
|	 |	  |
-------------------
|10|20|30|40|50|60|
-------------------
|	 |	  |
-------------------

-----------------------------------------------------------------------
Q] Fastest way to zero out a 2D array in C ?
memset(array, 0, sizeof(array))

-----------------------------------------------------------------------
Q] How to Return 2D array from function :
==>
int (*generate())[4] {
  static int arr[3][4] = {
    {3,3,1,1},
    {2,2,1,2},
    {1,1,1,2}
  };
  return arr;
}
Ref :
https://github.com/atulraut/atclib/blob/master/array/basics/pass_return_2D_array.c
https://github.com/atulraut/atclib/blob/master/array/leetcode/high/sort_the_Matrix_Diagonally.c

-----------------------------------------------------------------------
Q] Passing 2D array to function :
==> Pointer to the block of 2 Integer
void display(int (*a)[2]) {
    int i, j;
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++)
            printf("%d\n", a[i][j]);
    }
}
int main() {
    int arr[][2] = { 19, 29, 39, 49 };
    // ptr;
    display(arr);
}

Ref: https://github.com/atulraut/atclib/blob/master/array/basics/pass_return_2D_array.c

-----------------------------------------------------------------------
Q] Passing 3D array to function :
==>
int (*func())[2][3] {
   static int arr[][2][3] = {
				{11, 22, 33},
				{44, 55, 66},
			     };
   int (*ptr)[2][3] = arr;
   return arr;
}

-----------------------------------------------------------------------
Q] Static Array Initialisation
int** create_matrix(int rows, int cols) {
  int** max = (int**)calloc(sizeof(int), rows);
  for (int i=0; i<rows; ++i) {
    max[i] = (int*)calloc(sizeof(int *),  cols);
  }
  return max;
}
int **grid = create_matrix(rows, cols);

  *(*(grid + 0) + 0) = 1;
  *(*(grid + 0) + 1) = 1;
  *(*(grid + 0) + 2) = 1;
  *(*(grid + 1) + 0) = 1;
  *(*(grid + 1) + 1) = 0;
  *(*(grid + 1) + 2) = 1;
  *(*(grid + 2) + 0) = 1;
  *(*(grid + 2) + 1) = 1;
  *(*(grid + 2) + 2) = 1;

-----------------------------------------------------------------------
Q] Sparse Matrix - True Matrix Allocation if you know column size is fixed.
==>
int (*create_sparse_matrix(int rows))[3] {
    int (*mat)[3];
    mat = (int(*)[3]) malloc(rows * 3 * sizeof(int));
    return mat;
}

Ref:
https://github.com/atulraut/Advanced-Pointers-in-C/blob/master/pointers/sparse_matrix.c

-----------------------------------------------------------------------
Q] Size  of 2D Array
 int mat[3][3] = {
    {1, 2, 3},
    {2, 3, 4},
    {2, 3, 5}
  };

  int r = sizeof (mat)/ sizeof (mat[0]);
  int c = sizeof (mat[0]) / sizeof (mat[0][0]);
  debug ("row size = %d col size = %d ", r, c);
-----------------------------------------------------------------------
Ex - Parsing array of char pointer (2D)
 while(!failed && strs[0][++currentChar]) {
    debug ("ch=%c", strs[0][currentChar]);
    for(int j=1; j<strsSize; j++) {
      debug ("-> %c --> %c", strs[0][currentChar], strs[j][currentChar]);
      debug ("Whyy thisss?");
      if(strs[0][currentChar] != strs[j][currentChar] || !strs[j][currentChar]) {
	failed = 1;
	debug ("All Good");
	break;
      }
      debug ("NOT!");
    }
  }
  Ref : https://github.com/atulraut/atclib/blob/master/strings/leetcode/longestCommonPrefix.c
-----------------------------------------------------------------------
Q] Pointers to Array
==>

-----------------------------------------------------------------------
Q] Array of Pointers
==>

-----------------------------------------------------------------------
Find how many positive numbers are missingbetween two array elements:
Formula : arr[i + 1] - arr[i] - 1
|4|7| - 2 numbers missing between 4 & 7, i.e. 5,6
-----------------------------------------------------------------------
