Approach 1: Graph Theory + Iterative Depth-First Search
Ref: https://leetcode.com/problems/graph-valid-tree/solution/

Intuition

Note that this same approach also works with recursive
depth-first search and iterative breadth-first search.
We'll look at these briefly in the Algorithm section.

Recall that a graph, G, is a tree iff the following
two conditions are met:

    G is fully connected. In other words, for every pair
      of nodes in G, there is a path between them.
    G contains no cycles. In other words, there is exactly
      one path between each pair of nodes in G.

Depth-first search is a classic graph-traversal algorithm
that can be used to check for both of these conditions:

    G is fully connected if, and only if, we started a
      depth-first search from a single source and discovered
      all nodes in G during it.
    G contains no cycles if, and only if, the depth-first
      search never goes back to an already discovered node.
      We need to be careful though not to count trivial
      cycles of the form A → B → A that occur with most
      implementations of undirected edges.

Depth-first search requires being able to look up the adjacent
(immediate neighbours) of a given node. Like many graph
interview problems though, the input format we're given
doesn't allow us to quickly get the neighbours of a node.
Therefore, our first step is to convert the input into
an adjacency list. Recall that an adjacency list is where
we have a list of sub-lists, where each sub-list is the
list of the immediate neighbours for the i'th node.
